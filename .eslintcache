[{"C:\\develop\\git\\slowmmo\\src\\index.js":"1","C:\\develop\\git\\slowmmo\\src\\reportWebVitals.js":"2","C:\\develop\\git\\slowmmo\\src\\App.js":"3","C:\\develop\\git\\slowmmo\\src\\components\\Game.js":"4","C:\\develop\\git\\slowmmo\\src\\components\\Lobby.js":"5","C:\\develop\\git\\slowmmo\\src\\components\\Square2.js":"6","C:\\develop\\git\\slowmmo\\src\\components\\Board.js":"7","C:\\develop\\git\\slowmmo\\src\\api.js":"8","C:\\develop\\git\\slowmmo\\src\\components\\Square.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":7058,"mtime":1609282682508,"results":"13","hashOfConfig":"11"},{"size":1645,"mtime":1609006642676,"results":"14","hashOfConfig":"11"},{"size":3388,"mtime":1608838194010,"results":"15","hashOfConfig":"11"},{"size":2191,"mtime":1609007054496,"results":"16","hashOfConfig":"11"},{"size":12089,"mtime":1609279125785,"results":"17","hashOfConfig":"11"},{"size":787,"mtime":1609162323149,"results":"18","hashOfConfig":"11"},{"size":746,"mtime":1608832706732,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"i7j2aj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\develop\\git\\slowmmo\\src\\index.js",[],["41","42"],"C:\\develop\\git\\slowmmo\\src\\reportWebVitals.js",[],"C:\\develop\\git\\slowmmo\\src\\App.js",[],"C:\\develop\\git\\slowmmo\\src\\components\\Game.js",[],"C:\\develop\\git\\slowmmo\\src\\components\\Lobby.js",["43"],"import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { CompactPicker } from 'react-color';\r\nimport { CirclePicker } from 'react-color';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Square2 } from './Square2';\r\n\r\nexport class Lobby extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          //this sets up an empty board\r\n          name:'',\r\n          color:'black'\r\n        };   \r\n        \r\n        //bind this word to helper functions\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n\r\n      handleColorChange = (color) => {\r\n        console.log(\"setting color: \"+color.hex);\r\n        this.setState({ color: color.hex });\r\n      };\r\n\r\n    handleSubmit = (event) => {\r\n      //const form = event.currentTarget;\r\n      // if (form.checkValidity() === false) {\r\n      this.CreatePlayer(this.state.name, this.state.color)\r\n      .then(player=>{\r\n        this.props.onPlayerSelect(player.playerID);\r\n      }\r\n      );\r\n      event.preventDefault();\r\n    };\r\n\r\n    handleNameChange(event) {\r\n      this.setState({name: event.target.value});\r\n    }\r\n\r\n    async CreatePlayer(name, color)\r\n    {\r\n\r\n        const response = await fetch(\"http://\"+process.env.REACT_APP_API_SERVER+\":8080/game/player\",{\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          'name': name,\r\n          'color': color\r\n        })\r\n      })\r\n      \r\n      const player = await response.json();\r\n      console.log(player);\r\n      return player;\r\n    }\r\n\r\n    render(){\r\n\r\n        return (<div>\r\n          <h1>Welcome! Choose your name and color</h1>\r\n          <br/>\r\n          {/* <h3>Choose your name and color</h3> */}\r\n          <br/>\r\n\r\n\r\n<Form onSubmit={this.handleSubmit}>\r\n\r\n<Form.Group as={Row} controlId=\"formResult\">\r\n  <Form.Label column sm=\"1\">Preview</Form.Label>\r\n    <Col sm=\"5\">\r\n    <Square2 color={this.state.color}/>\r\n<span>&nbsp;&nbsp;</span> \r\n<h2 style={{float:\"left\"}} >{this.state.name}</h2>\r\n<div style={{clear:\"both\"}}></div>\r\n    </Col>   \r\n\r\n  </Form.Group>\r\n  <Form.Group as={Row} controlId=\"formName\">\r\n    <Form.Label column sm=\"1\">Name</Form.Label>\r\n    <Col sm=\"5\">\r\n      <Form.Control required placeholder=\"Enter name\" onChange={this.handleNameChange}/>\r\n    </Col>    \r\n  </Form.Group>\r\n  <Form.Group as={Row} controlId=\"formColor\">\r\n  <Form.Label column sm=\"1\">Color</Form.Label>\r\n    <Col sm=\"5\">\r\n      <CirclePicker required onChangeComplete={ this.handleColorChange }/>\r\n    </Col>    \r\n\r\n  </Form.Group>\r\n\r\n\r\n\r\n  <br/>\r\n  {/* <Row>\r\n  <Square2 color={this.state.color}/>\r\n<span>&nbsp;</span> \r\n<h2 style={{float:\"left\"}} >{this.state.name}</h2>\r\n<div style={{clear:\"both\"}}></div>\r\n</Row> */}\r\n<hr/>\r\n\r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Submit\r\n  </Button>\r\n</Form>\r\n         </div>\r\n         \r\n        )\r\n    }\r\n}","C:\\develop\\git\\slowmmo\\src\\components\\Square2.js",[],"C:\\develop\\git\\slowmmo\\src\\components\\Board.js",["44"],"//import React and Square component\r\nimport React from 'react';\r\nimport { Square } from './Square';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Square2 } from './Square2';\r\nimport {subscribeToBoardChanges} from '../api.js';\r\n//main board component with game logic\r\nexport class Board extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    var grid = {};    \r\n    this.state = {\r\n      //this sets up an empty board\r\n      'isLoaded': false,\r\n      'grid':grid, \r\n      'selected': [-1,-1],\r\n      'showModal':false,\r\n      'sourceUnit':0,\r\n      'targetUnit':0,\r\n      'targetPlayerID':0,\r\n      'result':false      \r\n\r\n    };\r\n\r\n    //bind this word to helper functions\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleHide = this.handleHide.bind(this);\r\n\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://\"+process.env.REACT_APP_API_SERVER+\":8080/game\",{\r\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n      //mode: 'no-cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Content-Type': 'application/json'\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            grid: result\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n\r\n      subscribeToBoardChanges((message) => this.loadData(message));\r\n      \r\n  }\r\n\r\n  loadData(message)\r\n  {\r\n    //console.log (\"got ping\");\r\n    console.log(message);\r\n\r\n    let g = this.state.grid;\r\n\r\n    g[message.y][message.x].owner=message.owner;\r\n\r\n    this.setState ({grid:g});\r\n\r\n  }\r\n\r\n  handleHide() {\r\n    this.setState({ showModal: false });\r\n  }\r\n\r\n  handleClick(y, x){\r\n\r\n      const g = this.state.grid;\r\n      const m = this.props.mode;\r\n      const s = this.state.selected;\r\n      //set the grid square cooresponding to the clicked square to the color of the current player\r\n      \r\n      if (m===1)\r\n      {\r\n        //make sure owned \r\n        console.log(\"selecting: \"+this.props.playerId) ;\r\n        if (g[y][x].owner === this.props.playerId)\r\n        {\r\n            this.setState({'selected':[y,x]});\r\n            //this.setState({'mode':2});  \r\n            this.props.onModeChange(2);\r\n        }\r\n      }\r\n      else if (m===2)\r\n      {\r\n        if (x===s[1] && y===s[0])//switch Units (Deploy) \r\n        {\r\n          console.log(\"Changing Unit: [\"+ y + \",\" + x + \"]\");\r\n          this.Deploy (x,y);          \r\n          this.setState({'grid':g});\r\n          this.props.onDeploy();\r\n        }\r\n        else if (g[y][x].owner !== this.props.playerId) //valid target?\r\n        {\r\n            if (Math.abs(x-s[1]<=1) && Math.abs(y-s[0]<=1)) //adjacent\r\n            {\r\n                //TODO: this should come from API\r\n                this.setState({targetUnit:g[y][x].units});\r\n                this.setState({sourceUnit:g[s[0]][s[1]].units});\r\n                this.setState({targetPlayerID:g[y][x].owner});            \r\n\r\n                //this.Attack (s[1],s[0],x,y)      \r\n                \r\n                this.Attack (s[1],s[0],x,y)\r\n                .then(result=>{\r\n                  this.setState({result:this.state.grid[y][x].owner===this.props.playerId });\r\n                }\r\n                );\r\n\r\n\r\n                this.setState({'selected':[-1,-1]});\r\n                //this.setState({'grid':g});  //is this still necessary?  Doesn't Attack do this? \r\n                \r\n                \r\n\r\n                this.setState({'showModal':true});   \r\n\r\n                //this.setState({'mode':1});  \r\n                this.props.onModeChange(1);\r\n            }\r\n        }\r\n        else if (g[y][x].owner === this.props.playerId) //select another square\r\n        {\r\n          this.setState({'selected':[y,x]});\r\n          this.props.onModeChange(2);\r\n        }\r\n      }\r\n      else if (m===3)//first placement\r\n      {\r\n        if (g[y][x].owner === 0) //Can't be owned, must be grey\r\n        {\r\n\r\n          console.log(\"claiming: [\"+ x + \",\" + y + \"]\");\r\n          this.Claim (x,y);          \r\n          this.setState({'grid':g});\r\n          this.props.onDeploy();\r\n          this.props.onModeChange(1);\r\n        }\r\n      }\r\n\r\n  }\r\n\r\n  async Attack(sourceX, sourceY, targetX, targetY){\r\n    await fetch(\"http://\"+process.env.REACT_APP_API_SERVER+\":8080/game/attack/\"+this.props.playerId+\"/\"+sourceX+\"/\"+sourceY + \"/\" + targetX+\"/\"+targetY, {\r\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Content-Type': 'application/json'\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            grid: result\r\n          });\r\n          return result;\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  //decrement units on deploy\r\n  Deploy(sourceX, sourceY){\r\n    fetch(\"http://\"+process.env.REACT_APP_API_SERVER+\":8080/game/deploy/\"+this.props.playerId+\"/\"+sourceX+\"/\"+sourceY , {\r\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            grid: result\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n\r\nClaim(sourceX, sourceY){\r\n  fetch(\"http://\"+process.env.REACT_APP_API_SERVER+\":8080/game/claim\", {\r\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: 'same-origin', // include, *same-origin, omit\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      'pId': this.props.playerId,\r\n      'x1': sourceX,\r\n      'y1': sourceY\r\n    })\r\n  })\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          grid: result\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n}\r\n\r\n  render(){\r\n    const { error, isLoaded } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      //define styles for the <table> element in the return() function below\r\n      const style={\r\n              //textAlign:\"center\",\r\n              //margin:\"auto\",\r\n              //height: \"auto\",\r\n              //width:\"500px\",\r\n              tableLayout:'fixed',\r\n              color: \"white\",\r\n            };\r\n\r\n      const g = this.state.grid;\r\n      const s = this.state.selected;\r\n      //const u = null;\r\n      //loop through the squares in each row and generate a new Square component,\r\n      //passing in props to the Square component in the nested map() function\r\n      const board = Object.keys(g).map((row, i) => { return (   \r\n        \r\n        <tr key={\"row_\"+i}>\r\n          \r\n          {Object.keys(g[row]).map((col, j) => {    \r\n                      \r\n            const selected_ = s[0] === i && s[1] === j && this.props.mode===2;    \r\n\r\n            let color_ = \"grey\";\r\n            if ( this.props.players[g[i][j].owner] != null)\r\n            {\r\n                color_ = this.props.players[g[i][j].owner].color ;\r\n            }\r\n\r\n            //return Square component, passing in the following as props:\r\n            //a value for the key which React needs (I think) and\r\n            //a function to handle clicks with grid coordinates passed in as arguments\r\n            return (\r\n              // <Square handleClick={()=>this.handleClick(i,j)} owner={g[i][j]} units={Math.floor(Math.random()*100)} key={i+\"_\"+j} />\r\n              <Square handleClick={()=>this.handleClick(i,j)} \r\n                  owner={g[i][j].owner} units={g[i][j].units} selected={selected_} \r\n                  key={i+\"_\"+j} playerId = {this.props.playerId} color = {color_} \r\n                  mode={this.props.mode}/>\r\n                )\r\n              }\r\n            )\r\n          }\r\n          \r\n        </tr>\r\n        )\r\n      });\r\n\r\n      //returns the board with the Square Components in {board},\r\n      //as well as a simple Button component that takes the handleReset function as a prop\r\n      //this could be further refactored to separate the layout and styling, but it isn't that complicated so I will leave it like this\r\n      return (\r\n        <div style={{ textAlign:'center'}} >\r\n          <Modal\r\n          show={this.state.showModal}\r\n          //show={true}\r\n          onHide={this.handleHide}\r\n          // container={this}\r\n          aria-labelledby=\"contained-modal-title\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title\">\r\n            {this.state.result === true ? //First placement\r\n                    \"You won!\"\r\n                    : \"You lost!\"}     \r\n              \r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            \r\n          <div style ={{color:'white', textAlign:\"center\"}}>\r\n            <Row className=\"justify-content-md-center\">\r\n            <Square2 units = {this.state.sourceUnit} owner = {this.props.playerId} \r\n            color={this.props.player.color} selected={false} playerId={this.props.playerId}\r\n            mode={0}/><span>&nbsp;</span> \r\n            <h2 style ={{color:'black'}}>            \r\n            {this.state.result === true ? //First placement\r\n                    \"beats\"\r\n                    : \"does not beat\"}    </h2><span>&nbsp;</span> \r\n          <Square2 units = {this.state.targetUnit} owner = {this.props.playerId} //playerID must be same to show unit\r\n            color={this.props.players[this.state.targetPlayerID].color} selected={false} playerId={this.props.playerId}\r\n            mode={0}/> </Row>\r\n          </div>\r\n           \r\n          </Modal.Body>\r\n          <Modal.Footer>          \r\n            <Button onClick={this.handleHide}>Close</Button>\r\n          </Modal.Footer>\r\n        </Modal> \r\n\r\n\r\n        <table style={style} class=\"unselectable\">\r\n          <tbody>\r\n            {board}\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}","C:\\develop\\git\\slowmmo\\src\\api.js",[],"C:\\develop\\git\\slowmmo\\src\\components\\Square.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":23},{"ruleId":"49","severity":1,"message":"53","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":13},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'CompactPicker' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","no-global-assign","no-unsafe-negation"]